<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>emkor&#39;s page</title>
    <link>https://www.emkor.eu/</link>
    <description>Recent content on emkor&#39;s page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 May 2020 08:59:04 +0200</lastBuildDate>
    
	<atom:link href="https://www.emkor.eu/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Choosing a place to live using Python</title>
      <link>https://www.emkor.eu/posts/choosing-a-place-to-live-using-python/</link>
      <pubDate>Mon, 20 Jul 2020 18:03:24 +0200</pubDate>
      
      <guid>https://www.emkor.eu/posts/choosing-a-place-to-live-using-python/</guid>
      <description>&lt;p&gt;Somewhere in April, me and my fiancée began to look for a place to settle down and build our home. Both of us were growing up in rural Poland, and we have learned the value of nature and spaciousness of countryside in our teenage years, so it&amp;rsquo;s clear that after spending 5 years in rented apartments in Wrocław, we are now convinced the city is no place for us (ongoing pandemic contributed to the decision, too).&lt;/p&gt;
&lt;p&gt;Given this context, our preferences for a perfect place are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;30 minutes one-way drive to Wrocław, where we both work&lt;/li&gt;
&lt;li&gt;it should be nearby our families and friends (most of them live north of Wrocław)&lt;/li&gt;
&lt;li&gt;closeness to forest, bonus points for stunning view on the forest or hills :)&lt;/li&gt;
&lt;li&gt;for working from home purposes, any good-quality broadband connection (using LTE as home internet, as it&amp;rsquo;s usual in rural Poland in the absence of cable broadband isn&amp;rsquo;t acceptable)&lt;/li&gt;
&lt;li&gt;bonus points for alternative way (other than by-car) to reach the city, i.e. public transit&lt;/li&gt;
&lt;li&gt;bonus points for closeness of elementary school, as we plan having children in near future&lt;/li&gt;
&lt;li&gt;as cheap as possible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After a quick glance at the map and estate market, I realized there&amp;rsquo;s simply too much info for me to process and make the informed decision: in the area of our broad interest, there&amp;rsquo;s well over 300 villages, and as I calculated later over scraped data, there&amp;rsquo;s over 1,500 active offers scattered across 3 largest estate offer providers. Adding the fact that those providers let sellers to &amp;ldquo;refresh&amp;rdquo; their offer to look like it&amp;rsquo;s added today on top of the daily offers, it was impossible for me to tell which offer is actually new and worth interesting.&lt;/p&gt;
&lt;p&gt;So I decided to gather the data and throw some markers on the map to see the options more clearly. Fast-forward three months of &lt;del&gt;scraping&lt;/del&gt; gathering the data and 900 lines of code later, I can honestly say it was worth it.&lt;/p&gt;
&lt;p&gt;To give you an idea of process of building my data-map, I&amp;rsquo;d start with listing worthy data sources:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;&amp;lt;30 minutes one-way drive to Wrocław, where we both work&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This requirement was the most difficult for me until I discovered &lt;code&gt;openrouteservice.org&lt;/code&gt;, where it&amp;rsquo;s easy to create a GeoJSON-exportable isochrone map displaying &lt;a href=&#34;http://maps.openrouteservice.org/reach?n1=51.187521&amp;amp;n2=17.002029&amp;amp;n3=10&amp;amp;a=51.118709,16.987459&amp;amp;b=0&amp;amp;i=0&amp;amp;j1=56&amp;amp;j2=7&amp;amp;j3=1&amp;amp;k1=en-US&amp;amp;k2=km&#34;&gt;time to reach a destination by car&lt;/a&gt;, which in my case was a large shopping mall in Wrocław.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.emkor.eu/images/choosing-place-to-live-with-python-openrouter-service.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;for working from home purposes, any good-quality broadband connection&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since 2014, there&amp;rsquo;s an ongoing effort carried by Polish Ministry of Digital Affairs (with funding from European Union, of course) to build a fiber-optics-based network in small villages across Poland, which for me is a game changer in terms of quality of life in Polish countryside. On the Ministry website, there is &lt;a href=&#34;https://wyszukiwarka.uke.gov.pl/&#34;&gt;a service for rendering (and exporting) data on availability of ISP services across country&lt;/a&gt;, which I used to export the data into CSV and use Python to turn it into GeoJSON format.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;as cheap as possible&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To gather pricing information so it&amp;rsquo;s easy to see how pricing changes across the villages, I ran a daily scraper using popular CI service for three main estate offer listings since April, outputting most valuable data into CSV files. Then those files would get inserted into SQLite DB, and with some SQL queries, I got average price per square meter in each village or town and truly recent offers. Then it was just a matter of rendering the data into some inter-operable format, like GeoJSON.&lt;/p&gt;
&lt;p&gt;To make data visual and put it on the map without writing JavaScript code (which I&amp;rsquo;m not fond of), I decided to use &lt;a href=&#34;http://geojson.io/#map=2/20.0/0.0&#34;&gt;geojson.io&lt;/a&gt; as WebUI. The site lets you render any arbitrary GeoJSON file directly onto Mapbox, and since it supports storing and loading the data as Gists, it was a no-brainer: the final artifact is easy to export as Gist anyway.&lt;/p&gt;
&lt;p&gt;You can see the end results &lt;a href=&#34;http://geojson.io/#id=gist:emkor/51ce817d1bca483b3bd0532b8e00233c&amp;amp;map=13/51.2503/17.0329&#34;&gt;here&lt;/a&gt; (it takes a few seconds to load).&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.emkor.eu/images/choosing-place-to-live-with-python-result.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;The code for all these transformations (but without the scraping part) is available &lt;a href=&#34;https://github.com/emkor/estate-analysis&#34;&gt;on my GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python logging quirk: watch out when calling dictConfig()</title>
      <link>https://www.emkor.eu/posts/python-logging-quirk/</link>
      <pubDate>Tue, 07 Jul 2020 19:59:56 +0200</pubDate>
      
      <guid>https://www.emkor.eu/posts/python-logging-quirk/</guid>
      <description>&lt;p&gt;Today, when I urgently needed to debug some weird, 3rd-party library behavior, I&amp;rsquo;ve discovered another treasure in vast fields of Python quirks, this time related to its built-in logging configuration API.&lt;/p&gt;
&lt;p&gt;The first and quickest thing a typical developer does when in need to gather more details on some reproducible behavior, is to enable more logs, of course. To give some context, my service utilizes Python built-in logging, configured by external JSON file, which in turn is being mounted using &lt;code&gt;volume&lt;/code&gt; directive into the service container. The method I call to actually configure the logging is &lt;code&gt;logging.config.dictConfig&lt;/code&gt;, taking as parameter parsed JSON/YAML in form of &lt;code&gt;Dict&lt;/code&gt;. Here&amp;rsquo;s partial logging config that &lt;strong&gt;resembles&lt;/strong&gt; mine, with non-crucial parts removed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;formatters&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;},
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;handlers&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;console&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;}
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;handlers&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;console&amp;#34;&lt;/span&gt;],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WARNING&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;loggers&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;LOGGER_NAME&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;handlers&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;console&amp;#34;&lt;/span&gt;],
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;INFO&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;propagate&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My services instantiates logger named &lt;code&gt;LOGGER_NAME&lt;/code&gt;, with logging level set to &lt;code&gt;INFO&lt;/code&gt;, which does not propagate to root logger; and the root logger itself, handling all 3rd party loggers, outputting level &lt;code&gt;WARNING&lt;/code&gt; and higher, as usually I don&amp;rsquo;t need their internal specifics. This setup works well, as I don&amp;rsquo;t have to update the configuration each time I change or add 3rd party library, and the config itself might be centralized for all the services in the future.&lt;/p&gt;
&lt;p&gt;So enabling debug logs would be as easy as editing that JSON file and changing &lt;code&gt;WARNING&lt;/code&gt; to &lt;code&gt;DEBUG&lt;/code&gt; in &lt;code&gt;root&lt;/code&gt; logger and re-running tests. To my surprise, despite this simple change, 3rd party library logs were still missing. After circa 2 hours(!) of furious debugging, I&amp;rsquo;ve found the cause: mighty &lt;code&gt;disable_existing_loggers&lt;/code&gt; parameter.&lt;/p&gt;
&lt;p&gt;The parameter is buried deep down in &lt;a href=&#34;https://docs.python.org/3/library/logging.config.html#dictionary-schema-details&#34;&gt;Python documentation&lt;/a&gt;, as last documented schema parameter in the section. It isn&amp;rsquo;t a parameter of &lt;code&gt;dictConfig&lt;/code&gt; method (as it is in &lt;code&gt;logging.config.fileConfig&lt;/code&gt;), nor it is mentioned in method docstring. It isn&amp;rsquo;t used in any example configuration snippet in Python documentation, there&amp;rsquo;s no warning notice for it in docs etc.&lt;/p&gt;
&lt;p&gt;My problem with that parameter is its default, quirky value: it&amp;rsquo;s &lt;code&gt;True&lt;/code&gt;. As a result, calling &lt;code&gt;dictConfig&lt;/code&gt; to configure all the service logging, &lt;strong&gt;disables logging for all instantiated &lt;code&gt;Logger&lt;/code&gt;s instances&lt;/strong&gt; not mentioned in the config. Yup, you read that correctly: it doesn&amp;rsquo;t re-configure existing loggers - despite logging module being &lt;a href=&#34;https://docs.python.org/2/library/logging.html#thread-safety&#34;&gt;thread-safe in Python by design&lt;/a&gt; - doesn&amp;rsquo;t re-create them with new configuration, just sets their logging level to &lt;code&gt;NOTSET&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now add the fact that Python&amp;rsquo;s import order is as described: first goes Python&amp;rsquo;s built-ins, then 3rd party libraries, and then internal code. As you can see, importing 3rd party libraries takes places before my import, so those libraries can - and often do - instantiate their loggers using code in top-level &lt;code&gt;__init__&lt;/code&gt; files, effectively preceding my setup logging code.&lt;/p&gt;
&lt;p&gt;And that was exactly my case - imported 3rd party libraries instantiated their loggers before my service called logging setup, which in turn disabled those loggers permanently, due to default parameter value.&lt;/p&gt;
&lt;p&gt;The fix is simple: just set the parameter to desired value in JSON configuration. But the time wasted on debugging is, well, wasted. For those who just glance over post to see the answer, below you can see fixed configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt; {
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;formatters&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;},
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;handlers&amp;#34;&lt;/span&gt;: {
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;console&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;}
   },
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;: {
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;handlers&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;console&amp;#34;&lt;/span&gt;],
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WARNING&amp;#34;&lt;/span&gt;
   },
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;loggers&amp;#34;&lt;/span&gt;: {
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;LOGGER_NAME&amp;#34;&lt;/span&gt;: {
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;handlers&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;console&amp;#34;&lt;/span&gt;],
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;INFO&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;propagate&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
     }
   },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;disable_existing_loggers&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Enabling GPU acceleration in Firefox 76 under Ubuntu 20.04 with Wayland</title>
      <link>https://www.emkor.eu/posts/gpu-acceleration-in-firefox76/</link>
      <pubDate>Wed, 06 May 2020 15:53:05 +0200</pubDate>
      
      <guid>https://www.emkor.eu/posts/gpu-acceleration-in-firefox76/</guid>
      <description>&lt;p&gt;Firefox 76 came out yesterday, bringing to the table - amongst &lt;a href=&#34;https://developer.mozilla.org/pl/docs/Mozilla/Firefox/Releases/76&#34;&gt;more widely known features&lt;/a&gt; - initial support for &lt;a href=&#34;https://bugzilla.mozilla.org/show_bug.cgi?id=1619258&#34;&gt;hardware acceleration of VP9-encoded videos&lt;/a&gt; for Wayland. Translating to human language: now you can watch YouTube videos without making your laptop fans spinning at full speed. Please note, however, the word &lt;em&gt;initial&lt;/em&gt; there - few tweaks are gonna be required to pull the hardware acceleration off.&lt;/p&gt;
&lt;p&gt;This guide is a compilation of tips and tweaks from various sources, like &lt;a href=&#34;https://mastransky.wordpress.com/2020/03/03/webgl-and-fgx-acceleration-on-wayland/&#34;&gt;Martin Stransky&amp;rsquo;s Blog&lt;/a&gt;, who is one of the Firefox developers, Arch wikis (&lt;a href=&#34;https://wiki.archlinux.org/index.php/Firefox#Hardware_video_acceleration&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://wiki.archlinux.org/index.php/Hardware_video_acceleration&#34;&gt;2&lt;/a&gt;) and some Reddit threads &lt;a href=&#34;https://old.reddit.com/r/firefox/comments/fjb00w/swaywayland_firefox_nightly_76_h264_vp9_hardware/&#34;&gt;1&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;First, if you have NVIDIA GPU, there&amp;rsquo;s no hope. As you probably know, there&amp;rsquo;s &lt;a href=&#34;https://github.com/swaywm/sway/issues/3039#issuecomment-434602125&#34;&gt;not so much love for NVIDIA&lt;/a&gt; in open-source world, and this feature is indifferent. Other than that, if you happen to have non-ancient AMD/ATI or Intel iGPU, you&amp;rsquo;re in luck.&lt;/p&gt;
&lt;p&gt;Now, to use your GPU, you need three things: latest Firefox, VA-API support in your OS, and a Wayland-based compositor. First one is just &lt;code&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y firefox&lt;/code&gt;. Fortunately, latter requirements comes by default with the new Ubuntu 20.04, which despite some &lt;a href=&#34;https://news.ycombinator.com/item?id=23056038&#34;&gt;serious controversies related to its Snap store&lt;/a&gt;, still seems to be most-polished distro out there.&lt;/p&gt;
&lt;p&gt;Now regarding the compositor: Wayland is still a little experimental, &amp;ldquo;glitches ahead&amp;rdquo; and all, but I&amp;rsquo;m using it for over a week now without any major issues or annoying hiccups. On plus side, it&amp;rsquo;s much smoother than x11 and allows for 4-finger gestures for switching workspaces - just like on macOS. Your mileage may vary, of course.&lt;/p&gt;
&lt;p&gt;To start Wayland session, simply choose &amp;ldquo;Ubuntu on Wayland&amp;rdquo; on OS login screen (gear icon in bottom-right corner). From now on, Wayland is the default, until you switch to classic, x11-based compositor.&lt;/p&gt;
&lt;p&gt;Second thing is support for VA-API on your OS. Ubuntu comes with default CLI utility, &lt;code&gt;vainfo&lt;/code&gt; (you can install it with &lt;code&gt;sudo apt-get install vainfo&lt;/code&gt;), just for the purpose of retrieving info on VA-API status. Your output should look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;libva info: VA-API version 1.7.0
libva info: Trying to open /usr/lib/x86_64-linux-gnu/dri/iHD_drv_video.so
libva info: Found init function __vaDriverInit_1_7
libva info: va_openDriver() returns 0
vainfo: VA-API version: 1.7 (libva 2.6.0)
vainfo: Driver version: Intel iHD driver for Intel(R) Gen Graphics - 20.1.1 ()
vainfo: Supported profile and entrypoints
      VAProfileMPEG2Simple            :	VAEntrypointVLD
      VAProfileMPEG2Main              :	VAEntrypointVLD
      VAProfileH264Main               :	VAEntrypointVLD
      VAProfileH264Main               :	VAEntrypointEncSliceLP
      VAProfileH264High               :	VAEntrypointVLD
      VAProfileH264High               :	VAEntrypointEncSliceLP
      VAProfileJPEGBaseline           :	VAEntrypointVLD
      VAProfileJPEGBaseline           :	VAEntrypointEncPicture
      VAProfileH264ConstrainedBaseline:	VAEntrypointVLD
      VAProfileH264ConstrainedBaseline:	VAEntrypointEncSliceLP
      VAProfileVP8Version0_3          :	VAEntrypointVLD
      VAProfileHEVCMain               :	VAEntrypointVLD
      VAProfileHEVCMain10             :	VAEntrypointVLD
      VAProfileVP9Profile0            :	VAEntrypointVLD
      VAProfileVP9Profile2            :	VAEntrypointVLD
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The presence of VP9 profiles is crucial for YouTube videos.&lt;/p&gt;
&lt;p&gt;If your output lacks this information and you still believe your GPU is able to decode video with hardware support, visit &lt;a href=&#34;https://wiki.archlinux.org/index.php/Hardware_video_acceleration&#34;&gt;this Arch wiki&lt;/a&gt; for further instructions, having in mind that you use Debian-derivative OS, so commands and package names are different.&lt;/p&gt;
&lt;h3 id=&#34;tweaking-firefox&#34;&gt;Tweaking Firefox&lt;/h3&gt;
&lt;p&gt;Next step is to tell Firefox to use Wayland. Just edit (with sudo) its &lt;code&gt;/usr/share/applications/firefox.desktop&lt;/code&gt; file and prepend &lt;code&gt;firefox&lt;/code&gt; executable with specific flags, so such line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Exec=firefox %u
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;becomes&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Exec=env MOZ_ENABLE_WAYLAND=1 MOZ_WEBRENDER=1 MOZ_DBUS_REMOTE=1 firefox %u
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and so on; &lt;strong&gt;repeat that for all 3 lines containing &lt;code&gt;Exec=&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now restart Firefox and check if those flags actually work by going to &lt;code&gt;about:support&lt;/code&gt; and checking &lt;code&gt;Window protocol&lt;/code&gt; - its value should be &lt;code&gt;wayland&lt;/code&gt; (or similar), not &lt;code&gt;x11&lt;/code&gt;. If that&amp;rsquo;s not the case, please note that Firefox downloaded directly from Mozilla website instead of installed from PPA (which translates to &amp;ldquo;not installed with &lt;code&gt;apt-get&lt;/code&gt;&amp;rdquo;) might have trouble with using those flags you just pasted.&lt;/p&gt;
&lt;p&gt;The last step is to enable few flags in Firefox config, so while being in the browser, go to &lt;code&gt;about:config&lt;/code&gt; URL and enable these flags by settings them to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;widget.wayland-dmabuf-vaapi.enabled
gfx.webrender.all
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and set this one below to &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;media.ffvpx.enabled
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;verification&#34;&gt;Verification&lt;/h3&gt;
&lt;p&gt;Restart the browser. Now it&amp;rsquo;s time for one last verification that everything is correct: go to &lt;code&gt;about:support&lt;/code&gt; and verify those params:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Compositing&lt;/code&gt; should be &lt;code&gt;WebRender&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WebGL 1 Driver Version&lt;/code&gt; should say &lt;code&gt;OpenGL something something&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Window Protocol&lt;/code&gt; should be &lt;code&gt;wayland/drm&lt;/code&gt; or similar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If that&amp;rsquo;s the case, you&amp;rsquo;re ready to head to YouTube and play some 4K video in fullscreen. In my case, with i7-8650u laptop, watching 4K video on 1440p external screen causes Firefox process to eat ~50% CPU measured in &lt;a href=&#34;https://hisham.hm/htop/&#34;&gt;htop&lt;/a&gt; (before tweaks it was between 100-150%).&lt;/p&gt;
&lt;p&gt;Overall rendering performance should be improved, too, so scrolling should have much less latency and be much smoother, just like on Windows or macOS. Before these tweaks my Firefox 76 installation scored around 86 points in &lt;a href=&#34;https://browserbench.org/MotionMark/&#34;&gt;MotionMark benchmark&lt;/a&gt;, after applying tweaks the result was 315 points - even higher than Chromium (207), which is known to outperform Firefox severely in rendering benchmarks.&lt;/p&gt;
&lt;p&gt;One last thing to worry about is that each time you update Firefox, custom flags added in &lt;code&gt;firefox.desktop&lt;/code&gt; will be gone and need to be updated.&lt;/p&gt;
&lt;p&gt;Have fun browsing&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mateusz Korzeniowski</title>
      <link>https://www.emkor.eu/about/</link>
      <pubDate>Mon, 04 May 2020 08:59:04 +0200</pubDate>
      
      <guid>https://www.emkor.eu/about/</guid>
      <description>&lt;h4 id=&#34;coding-for-living-since-2013&#34;&gt;Coding for living since 2013&lt;/h4&gt;
&lt;p&gt;Expertise:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 3, basics of asyncio&lt;/li&gt;
&lt;li&gt;Docker containers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Commercial experience:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux server OSs (Debian, CentOS)&lt;/li&gt;
&lt;li&gt;Kubernetes platform (overall concept, minikube, helm, kubeadm and kubectl tools)&lt;/li&gt;
&lt;li&gt;RabbitMQ message broker (AMQP protocol)&lt;/li&gt;
&lt;li&gt;SQL databases (PostgreSQL, MySQL) and query language&lt;/li&gt;
&lt;li&gt;microservices design, concurrent systems&lt;/li&gt;
&lt;li&gt;Java 8 (1.5 year in enterprise project)&lt;/li&gt;
&lt;li&gt;GitLab Pipelines, Jenkins CI tools&lt;/li&gt;
&lt;li&gt;DevOps (ansible, infrastructure-as-a-code patterns)&lt;/li&gt;
&lt;li&gt;Agile methodology, LeSS framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hobby experience:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;terraform, on-premise OpenStack, OpenWRT, WireGuard VPN&lt;/li&gt;
&lt;li&gt;web scraping (scrapy framework)&lt;/li&gt;
&lt;li&gt;GitHub Actions, Travis CI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Interested in, but not much experience:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Golang, front-end Javascript&lt;/li&gt;
&lt;li&gt;machine learning&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;open-source&#34;&gt;Open-source&lt;/h4&gt;
&lt;p&gt;See &lt;a href=&#34;https://www.emkor.eu/projects/&#34;&gt;Projects&lt;/a&gt; for some of my work&lt;/p&gt;
&lt;h4 id=&#34;contact&#34;&gt;Contact&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;mailto:emkor93@gmail.com&#34;&gt;emkor93@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/in/mateusz-korzeniowski-4aa472131/&#34;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Projects, tutorials, data</title>
      <link>https://www.emkor.eu/projects/</link>
      <pubDate>Mon, 04 May 2020 08:59:04 +0200</pubDate>
      
      <guid>https://www.emkor.eu/projects/</guid>
      <description>&lt;h4 id=&#34;libraries--tools--services&#34;&gt;Libraries / tools / services&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;built &lt;a href=&#34;https://github.com/emkor/recogn-img&#34;&gt;own library&lt;/a&gt; for image recognition on CCTV camera images, with &lt;a href=&#34;https://pjreddie.com/darknet/yolo/&#34;&gt;YOLO model&lt;/a&gt; included , packaged and published as &lt;a href=&#34;https://hub.docker.com/repository/docker/emkor/recogn-img&#34;&gt;docker image&lt;/a&gt; for convenience&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.emkor.eu/curator/&#34;&gt;I&amp;rsquo;ve built Spotify playlist manager (alpha-stage!)&lt;/a&gt; using &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/emkor/napi-py&#34;&gt;CLI tool for downloading movie subtitles&lt;/a&gt; published on &lt;a href=&#34;https://pypi.org/project/napi-py/&#34;&gt;pypi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(abandoned) &lt;a href=&#34;https://github.com/emkor/audiopyle&#34;&gt;audio feature extraction engine&lt;/a&gt; in microservice design, deployed on &lt;a href=&#34;https://www.docker.com/products/container-runtime&#34;&gt;Docker&lt;/a&gt;, backed by &lt;a href=&#34;http://www.celeryproject.org/&#34;&gt;Celery&lt;/a&gt;, &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt; and &lt;a href=&#34;https://www.mysql.com&#34;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/emkor/mpyk&#34;&gt;library&lt;/a&gt; for retrieving geolocation data for Wrocław public transit (tram and buses, basically)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;published-data&#34;&gt;Published data&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;harvesting and publishing &lt;a href=&#34;https://www.emkor.eu/mpyk&#34;&gt;Wrocław public transit geolocation data&lt;/a&gt; using &lt;a href=&#34;https://www.backblaze.com/b2/cloud-storage.html&#34;&gt;Backblaze B2 service&lt;/a&gt; and Raspberry Pi hidden in my wardrobe :)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;instructions--tutorials&#34;&gt;Instructions / tutorials&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;self-hosting &lt;a href=&#34;https://www.openstack.org/&#34;&gt;OpenStack-based&lt;/a&gt; homelab server &lt;a href=&#34;https://github.com/emkor/infra-homelab&#34;&gt;with instructions&lt;/a&gt; backed by &lt;a href=&#34;https://www.rdoproject.org/install/packstack&#34;&gt;Packstack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;this website/blog :)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
