<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on emkor&#39;s page</title>
    <link>https://www.emkor.eu/tags/python/</link>
    <description>Recent content in python on emkor&#39;s page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Jul 2020 18:03:24 +0200</lastBuildDate>
    
	<atom:link href="https://www.emkor.eu/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Choosing a place to live using Python</title>
      <link>https://www.emkor.eu/posts/choosing-a-place-to-live-using-python/</link>
      <pubDate>Mon, 20 Jul 2020 18:03:24 +0200</pubDate>
      
      <guid>https://www.emkor.eu/posts/choosing-a-place-to-live-using-python/</guid>
      <description>&lt;p&gt;Somewhere in April, me and my fiancée began to look for a place to settle down and build our home. Both of us were growing up in rural Poland, and we have learned the value of nature and spaciousness of countryside in our teenage years, so it&amp;rsquo;s clear that after spending 5 years in rented apartments in Wrocław, we are now convinced the city is no place for us (ongoing pandemic contributed to the decision, too).&lt;/p&gt;
&lt;p&gt;Given this context, our preferences for a perfect place are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;30 minutes one-way drive to Wrocław, where we both work&lt;/li&gt;
&lt;li&gt;it should be nearby our families and friends (most of them live north of Wrocław)&lt;/li&gt;
&lt;li&gt;closeness to forest, bonus points for stunning view on the forest or hills :)&lt;/li&gt;
&lt;li&gt;for working from home purposes, any good-quality broadband connection (using LTE as home internet, as it&amp;rsquo;s usual in rural Poland in the absence of cable broadband isn&amp;rsquo;t acceptable)&lt;/li&gt;
&lt;li&gt;bonus points for alternative way (other than by-car) to reach the city, i.e. public transit&lt;/li&gt;
&lt;li&gt;bonus points for closeness of elementary school, as we plan having children in near future&lt;/li&gt;
&lt;li&gt;as cheap as possible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After a quick glance at the map and estate market, I realized there&amp;rsquo;s simply too much info for me to process and make the informed decision: in the area of our broad interest, there&amp;rsquo;s well over 300 villages, and as I calculated later over scraped data, there&amp;rsquo;s over 1,500 active offers scattered across 3 largest estate offer providers. Adding the fact that those providers let sellers to &amp;ldquo;refresh&amp;rdquo; their offer to look like it&amp;rsquo;s added today on top of the daily offers, it was impossible for me to tell which offer is actually new and worth interesting.&lt;/p&gt;
&lt;p&gt;So I decided to gather the data and throw some markers on the map to see the options more clearly. Fast-forward three months of &lt;del&gt;scraping&lt;/del&gt; gathering the data and 900 lines of code later, I can honestly say it was worth it.&lt;/p&gt;
&lt;p&gt;To give you an idea of process of building my data-map, I&amp;rsquo;d start with listing worthy data sources:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;&amp;lt;30 minutes one-way drive to Wrocław, where we both work&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This requirement was the most difficult for me until I discovered &lt;code&gt;openrouteservice.org&lt;/code&gt;, where it&amp;rsquo;s easy to create a GeoJSON-exportable isochrone map displaying &lt;a href=&#34;http://maps.openrouteservice.org/reach?n1=51.187521&amp;amp;n2=17.002029&amp;amp;n3=10&amp;amp;a=51.118709,16.987459&amp;amp;b=0&amp;amp;i=0&amp;amp;j1=56&amp;amp;j2=7&amp;amp;j3=1&amp;amp;k1=en-US&amp;amp;k2=km&#34;&gt;time to reach a destination by car&lt;/a&gt;, which in my case was a large shopping mall in Wrocław.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.emkor.eu/images/choosing-place-to-live-with-python-openrouter-service.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;for working from home purposes, any good-quality broadband connection&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since 2014, there&amp;rsquo;s an ongoing effort carried by Polish Ministry of Digital Affairs (with funding from European Union, of course) to build a fiber-optics-based network in small villages across Poland, which for me is a game changer in terms of quality of life in Polish countryside. On the Ministry website, there is &lt;a href=&#34;https://wyszukiwarka.uke.gov.pl/&#34;&gt;a service for rendering (and exporting) data on availability of ISP services across country&lt;/a&gt;, which I used to export the data into CSV and use Python to turn it into GeoJSON format.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;as cheap as possible&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To gather pricing information so it&amp;rsquo;s easy to see how pricing changes across the villages, I ran a daily scraper using popular CI service for three main estate offer listings since April, outputting most valuable data into CSV files. Then those files would get inserted into SQLite DB, and with some SQL queries, I got average price per square meter in each village or town and truly recent offers. Then it was just a matter of rendering the data into some inter-operable format, like GeoJSON.&lt;/p&gt;
&lt;p&gt;To make data visual and put it on the map without writing JavaScript code (which I&amp;rsquo;m not fond of), I decided to use &lt;a href=&#34;http://geojson.io/#map=2/20.0/0.0&#34;&gt;geojson.io&lt;/a&gt; as WebUI. The site lets you render any arbitrary GeoJSON file directly onto Mapbox, and since it supports storing and loading the data as Gists, it was a no-brainer: the final artifact is easy to export as Gist anyway.&lt;/p&gt;
&lt;p&gt;You can see the end results &lt;a href=&#34;http://geojson.io/#id=gist:emkor/51ce817d1bca483b3bd0532b8e00233c&amp;amp;map=13/51.2503/17.0329&#34;&gt;here&lt;/a&gt; (it takes a few seconds to load).&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://www.emkor.eu/images/choosing-place-to-live-with-python-result.jpg&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;The code for all these transformations (but without the scraping part) is available &lt;a href=&#34;https://github.com/emkor/estate-analysis&#34;&gt;on my GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python logging quirk: watch out when calling dictConfig()</title>
      <link>https://www.emkor.eu/posts/python-logging-quirk/</link>
      <pubDate>Tue, 07 Jul 2020 19:59:56 +0200</pubDate>
      
      <guid>https://www.emkor.eu/posts/python-logging-quirk/</guid>
      <description>&lt;p&gt;Today, when I urgently needed to debug some weird, 3rd-party library behavior, I&amp;rsquo;ve discovered another treasure in vast fields of Python quirks, this time related to its built-in logging configuration API.&lt;/p&gt;
&lt;p&gt;The first and quickest thing a typical developer does when in need to gather more details on some reproducible behavior, is to enable more logs, of course. To give some context, my service utilizes Python built-in logging, configured by external JSON file, which in turn is being mounted using &lt;code&gt;volume&lt;/code&gt; directive into the service container. The method I call to actually configure the logging is &lt;code&gt;logging.config.dictConfig&lt;/code&gt;, taking as parameter parsed JSON/YAML in form of &lt;code&gt;Dict&lt;/code&gt;. Here&amp;rsquo;s partial logging config that &lt;strong&gt;resembles&lt;/strong&gt; mine, with non-crucial parts removed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;formatters&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;},
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;handlers&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;console&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;}
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;handlers&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;console&amp;#34;&lt;/span&gt;],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WARNING&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;loggers&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;LOGGER_NAME&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;handlers&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;console&amp;#34;&lt;/span&gt;],
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;INFO&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;propagate&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My services instantiates logger named &lt;code&gt;LOGGER_NAME&lt;/code&gt;, with logging level set to &lt;code&gt;INFO&lt;/code&gt;, which does not propagate to root logger; and the root logger itself, handling all 3rd party loggers, outputting level &lt;code&gt;WARNING&lt;/code&gt; and higher, as usually I don&amp;rsquo;t need their internal specifics. This setup works well, as I don&amp;rsquo;t have to update the configuration each time I change or add 3rd party library, and the config itself might be centralized for all the services in the future.&lt;/p&gt;
&lt;p&gt;So enabling debug logs would be as easy as editing that JSON file and changing &lt;code&gt;WARNING&lt;/code&gt; to &lt;code&gt;DEBUG&lt;/code&gt; in &lt;code&gt;root&lt;/code&gt; logger and re-running tests. To my surprise, despite this simple change, 3rd party library logs were still missing. After circa 2 hours(!) of furious debugging, I&amp;rsquo;ve found the cause: mighty &lt;code&gt;disable_existing_loggers&lt;/code&gt; parameter.&lt;/p&gt;
&lt;p&gt;The parameter is buried deep down in &lt;a href=&#34;https://docs.python.org/3/library/logging.config.html#dictionary-schema-details&#34;&gt;Python documentation&lt;/a&gt;, as last documented schema parameter in the section. It isn&amp;rsquo;t a parameter of &lt;code&gt;dictConfig&lt;/code&gt; method (as it is in &lt;code&gt;logging.config.fileConfig&lt;/code&gt;), nor it is mentioned in method docstring. It isn&amp;rsquo;t used in any example configuration snippet in Python documentation, there&amp;rsquo;s no warning notice for it in docs etc.&lt;/p&gt;
&lt;p&gt;My problem with that parameter is its default, quirky value: it&amp;rsquo;s &lt;code&gt;True&lt;/code&gt;. As a result, calling &lt;code&gt;dictConfig&lt;/code&gt; to configure all the service logging, &lt;strong&gt;disables logging for all instantiated &lt;code&gt;Logger&lt;/code&gt;s instances&lt;/strong&gt; not mentioned in the config. Yup, you read that correctly: it doesn&amp;rsquo;t re-configure existing loggers - despite logging module being &lt;a href=&#34;https://docs.python.org/2/library/logging.html#thread-safety&#34;&gt;thread-safe in Python by design&lt;/a&gt; - doesn&amp;rsquo;t re-create them with new configuration, just sets their logging level to &lt;code&gt;NOTSET&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now add the fact that Python&amp;rsquo;s import order is as described: first goes Python&amp;rsquo;s built-ins, then 3rd party libraries, and then internal code. As you can see, importing 3rd party libraries takes places before my import, so those libraries can - and often do - instantiate their loggers using code in top-level &lt;code&gt;__init__&lt;/code&gt; files, effectively preceding my setup logging code.&lt;/p&gt;
&lt;p&gt;And that was exactly my case - imported 3rd party libraries instantiated their loggers before my service called logging setup, which in turn disabled those loggers permanently, due to default parameter value.&lt;/p&gt;
&lt;p&gt;The fix is simple: just set the parameter to desired value in JSON configuration. But the time wasted on debugging is, well, wasted. For those who just glance over post to see the answer, below you can see fixed configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt; {
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;formatters&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;},
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;handlers&amp;#34;&lt;/span&gt;: {
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;console&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;}
   },
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;: {
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;handlers&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;console&amp;#34;&lt;/span&gt;],
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WARNING&amp;#34;&lt;/span&gt;
   },
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;loggers&amp;#34;&lt;/span&gt;: {
     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;LOGGER_NAME&amp;#34;&lt;/span&gt;: {
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;handlers&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;console&amp;#34;&lt;/span&gt;],
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;level&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;INFO&amp;#34;&lt;/span&gt;,
       &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;propagate&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
     }
   },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;disable_existing_loggers&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
